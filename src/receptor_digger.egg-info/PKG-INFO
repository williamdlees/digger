Metadata-Version: 2.1
Name: receptor-digger
Version: 0.5.0
Summary: Tools for de novo discovery of genomic germline IG and TR receptor sequences
Home-page: https://github.com/williamdlees/digger
Author: William Lees
Author-email: william@lees.org.uk
Project-URL: Bug Tracker, https://github.com/williamdlees/digger/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# Digger
A toolkit for the automatic annotation of V,D and J genes and associated features in B cell receptor IGH genomic loci, developed for use with [VDJbase](https://vdjbase.org)

## Pipeline
The  pipeline is as follows:
* Identify putative gene locations by running the assembly through BLAST, against an existing seed reference set, possibly from another species. BLAST must be [installed locally](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download) (just the executable, no NCBI databases are needed).
* Process each high-likelihood match, identifying leader and RSS
* Extract confirmed gene sequences and features
* Optionally, [SEARCH-D](https://github.com/williamdlees/SEARCH-D) can be used to identify additional D genes de novo: this will give improved sensitivity but in my experience it is best to run it on the D gene locus as identified by BLAST as this reduces scope for false positives. Please use this [forked version](https://github.com/williamdlees/SEARCH-D), which has  minor changes so that gene co-ordinates are returned.
* Output is a CSV file of co-ordinates and features. Gapped sequences are provided using the closest sequence from a provided reference set.

Usage examples can be found in .bat files in the subdirectories. These should run either 
sourced from a linux shell or in Windows. For Windows, the [gnu core utilities](https://github.com/bmatzelle/gow/wiki) are required, or WSL. 

## Key Commands

### blastresults_to_csv

Processes the output from BLAST (format 7) to create a CSV file of top-ranking hits

```commandline
usage: blastresults_to_csv.py [-h] [-a] infile out_prefix

Convert blast file format 7 to one or more CSVs

positional arguments:
  infile        the blast file
  out_prefix    prefix for csv files

optional arguments:
  -h, --help    show this help message and exit
  -a, --append  append to existing output files
```

### find_alignments.py

Uses the hit file generated by blastresults_to_csv to scan the assembly for valid genes

```commandline
usage: find_alignments.py [-h] [-ref REF] [-align ALIGN] germline_file assembly_file blast_file motif_dir output_file

Find valid genes in a contig given blast matches

positional arguments:
  germline_file  reference set used to produce the blast matches
  assembly_file  assembly or contig provided to blast
  blast_file     results from blast in the format provided by blastresults_to_csv (can contain wildcards if there are
                 multiple files, will be matched by glob)
  motif_dir      pathname to directory containing motif probability files
  output_file    output file (csv)

optional arguments:
  -h, --help     show this help message and exit
  -ref REF       ungapped reference to compare to: name and reference file separated by comma eg mouse,mouse.fasta
                 (may be repeated multiple times)
  -align ALIGN   gapped reference file to use for V gene alignments (should contain V genes only), otherwise de novo
                 alignment will be attempted
  -locus LOCUS   locus (default is IGH)
  -sense SENSE   sense in which to read the assembly (forward or reverse) (will select automatically if no sense is specified)
```

